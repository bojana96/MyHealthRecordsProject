@model HealthRecords.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/zxcvbn/4.2.0/zxcvbn.js"></script>
<style>
    meter {
        /* Reset the default appearance */
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0 auto 1em;
       
        /* Applicable only to Firefox */
        background: none;
        background-color: rgba(0, 0, 0, 0.1);
    }

        meter::-webkit-meter-bar {
            background: none;
            background-color: rgba(0, 0, 0, 0.1);
        }

        /* Webkit based browsers */
        meter[value="1"] {
            background: red;
        }

        meter[value="2"] {
            background: yellow;
        }

        meter[value="3"] {
            background: orange;
        }

        meter[value="4"] {
            background: green;
        }

        /* Gecko based browsers */
        meter[value="1"] {
            background: red;
        }

        meter[value="2"] {
            background: yellow;
        }

        meter[value="3"] {
            background: orange;
        }

        meter[value="4"] {
            background: green;
        }

</style>
<div style="margin: 30px; padding: 20px;">
    <h2>@ViewBag.Title.</h2>

    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <h4>Create a new account.</h4>
        <hr />
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password" })
                <meter max="4" id="password-strength-meter" value="0" style="position: relative; height: 20px; border-radius: 10%; width: 29.6%">

                    <p id="password-strength-text" style="position: relative; top: 5%; text-align:center; color: white; font-weight: 600"></p>
                </meter>

            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Embg, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Embg, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-default" value="Register" />
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    

}

<script>
    var strength = {
        0: "Worst",
        1: "Bad",
        2: "Weak",
        3: "Good",
        4: "Strong"
    }

    var password = document.getElementById('password');
    var meter = document.getElementById('password-strength-meter');
    var text = document.getElementById('password-strength-text');

    password.addEventListener('input', function () {
        var val = password.value;
        var result = zxcvbn(val);

        // Update the password strength meter
        meter.value = result.score;

        // Update the text indicator
        if (val !== "") {
            text.innerHTML =  strength[result.score];
        } else {
            text.innerHTML = "";
        }
    });
</script>

